buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.mongodb:bson:3.6.3"
    }
}

plugins {
    id "com.github.gmazzo.sqlite" version "0.2"
}

apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

import groovy.util.XmlParser
import groovy.xml.XmlUtil
import org.gradle.api.internal.file.copy.CopySpecInternal
import org.bson.BsonBinaryReader
import org.bson.BsonReader
import org.bson.Document
import org.bson.codecs.DecoderContext
import org.bson.codecs.DocumentCodec
import org.bson.BsonSerializationException
import java.nio.ByteBuffer
import java.nio.ByteOrder

project.ext {
    PACKAGEXML_TEMPLATE = '''<?xml version="1.0" encoding="utf-8" ?>
    <package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.mendix.com/package/1.0/">
        <modelerProject xmlns="http://www.mendix.com/modelerProject/1.0/">
            <module name="''' + "${project.name}" + '''" />
            <projectFile path="project.mpr" />
            <files/>
        </modelerProject>
    </package>'''

    CC_VERSION = '7.2.0'
    MXBUILD_VERSION = '7.1.0'
    CC_MODULE_ID = '5002A61056D0954A9EDEAECB3B953F23'
}

def runtimeLibs = "$buildDir/runtime/bundles"
def userLibDir = "$projectDir/src/CommunityCommons/userlib"

configurations {
    tar
}

repositories {
    mavenCentral()
    ivy {
	url 'https://cdn.mendix.com/'
	layout 'pattern', {
	    artifact '/[organisation]/[module]-[revision].[ext]'
	}
    }
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile fileTree(dir: "$runtimeLibs")
    compile group: 'org.owasp.antisamy', name: 'antisamy', version: '1.5.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.pdfbox', name: 'pdfbox-app', version: '2.0.8'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compileOnly fileTree(dir: "$runtimeLibs")

    tar "runtime:mxbuild:${project.MXBUILD_VERSION}@tar.gz"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/CommunityCommons/javasource"]
        }
        resources {
            srcDirs = ["src/CommunityCommons/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/CommunityCommons/test"]
        }
    }
}

task copyToUserlib( type: Copy ) {
    into userLibDir
    from configurations.runtime
    eachFile { fileCopyDetails ->
        def requiredLibFlag = new File( destinationDir, "${fileCopyDetails.name}.${project.name}.RequiredLib")
        requiredLibFlag.write ''
    }
}

task untarMxbuild( type: Copy ) {
    //TODO: don't re-download if bundles directory exists
    configurations.tar.findAll{it.name.endsWith('tar.gz')}.each {
        from tarTree(resources.gzip(it))
        into buildDir
        include('**/runtime/bundles/*')
        includeEmptyDirs = false
    }
}

distributions {
    main {
        baseName = 'CommunityCommons'
        contents {
            into('/') {
                from 'src/CommunityCommons'
                exclude('**/proxies/*')
                exclude('**/system/*')
            }
            into('/') {
                from 'package.xml'
            }
        }
    }
}

distZip {
    archiveName "$baseName-${project.CC_VERSION}" + ".mpk"
}


task fullDist {
    dependsOn 'clean', 'copyToUserlib', 'untarMxbuild', 'packageXML', 'distZip'
}

clean {
    delete "$projectDir/src/CommunityCommons/userlib"
    delete "$projectDir/package.xml"
}

task packageXML {
    ext.interpolateFileElementXML = { resource ->
        return "<file path=\"${resource}\" />"
    }

    ext.buildRelativePath = { fileEntry, directory ->
        return (fileEntry.absolutePath - directory.absolutePath).replace("/", "\\").substring(1)
    }

    ext.getResources = {
        def list = []
        def userLibDirectory = file(userLibDir)

        def distributionCopySpec = distributions.main.contents.buildRootResolver().allSource

        distributionCopySpec.each { f ->
            list << interpolateFileElementXML(
                buildRelativePath(f, file("$projectDir/src/CommunityCommons"))
            )
        }

        return list
    }

    doLast {
        def packageXMLResources = getResources()
        def packageXML = new XmlParser().parseText(project.PACKAGEXML_TEMPLATE)

        packageXMLResources.each { resource ->
            def resourceXML = new XmlParser().parseText(resource)
            packageXML.modelerProject.files[0].append(resourceXML)
        }

        String out = XmlUtil.serialize( packageXML )
        new File("$projectDir/package.xml").write(out)
    }

    tasks.distZip.shouldRunAfter tasks.packageXML
    tasks.untarMxbuild.shouldRunAfter tasks.copyToUserlib
    tasks.packageXML.shouldRunAfter tasks.untarMxbuild
}

task readProjectMpr {
    // https://gist.github.com/RealNitro/746c07a50b1ae897fe44
    ext.readBSON = { buffer ->
        while (true) {
            BsonReader reader = new BsonBinaryReader (buffer)
            DecoderContext decoderContext = DecoderContext.builder().build()
            DocumentCodec codec = new DocumentCodec()
            try {
                Document document = codec.decode(reader, decoderContext)
                println document.getString('Name')
            } catch (BsonSerializationException e) {
                break;
            }
        }
    }

    // https://stackoverflow.com/a/28628209/412834
    ext.toUUID = { bar ->
        ByteBuffer source = ByteBuffer.wrap(bar);
        ByteBuffer target = ByteBuffer.allocate(16).
            order(ByteOrder.LITTLE_ENDIAN).
            putInt(source.getInt()).
            putShort(source.getShort()).
            putShort(source.getShort()).
            order(ByteOrder.BIG_ENDIAN).
            putLong(source.getLong());
        target.rewind();
        return new UUID(target.getLong(), target.getLong());
    }

    ext.queryUnitIDs = { db, containerID, units ->
        def result = db.eachRow("SELECT hex(UnitID) FROM Unit WHERE hex(ContainerID)=:cid;", cid: containerID) { row ->
            def unitID = row.getString(1)
            queryUnitIDs(db, unitID, units)
            units << unitID
        }
        return units
    }

    def mprFile = file("$projectDir/src/CommunityCommons/CommunityCommons.mpr")
    //outputs.file file("project.mpr")
    doLast {
        def db = openSQLiteDatabase(mprFile)
        //        def unitIDs = queryUnitIDs(db, CC_MODULE_ID, [])

        //        def query = "SELECT * FROM Unit WHERE hex(UnitID) in (${unitIDs.collect{"\'$it\'"}.join(',')});"
        //        println query

        def query = '''SELECT * FROM Unit WHERE hex(UnitID) in ('FF1081D837B03042BB6961FE534AB8ED','C1B8353EA82E1145B0E2D9CD0F7C3581','1C31FA5365115645B935209983052963','3F72A3386BAE9042A843A217129728C6','632E98090A62D644B70B23F2AF5EC14C','90C0CA03CA79A547B54C9153F24D9CB6','9F97395F5A5EFD40A7DADE0FA871B31C','A343AAE0BEBF2142B2F9AD7618970CF1','AC4285728BF4244B9C6B9CD91E205C46','B7968FBBB6207C4A8391FF34F087BEA1','B9AD1DC21DE9524C9993D17B015522BA','C4851392F932284BBD583E69091C0B7D','CFA45081468B624CA54059DC3B7EF86F','F63F3995D954054F80A2E299066D57A2','A45E7EB8C01BFD408AD99B4079A37004','48A2BF121FD29A49AAE430D177E88679','1CC31929A8CBCA4AA326B0A11AF398DD','1B4C120FA214A74D8B83D32530AA0649','1DE3835ED38D0F41A745F3F0FC2D4E1B','226103D9F80C6A4E9F1CC6C29EDCFE43','2B74DC774AAB4C4493A4BF993A08C595','3B4E544A70BC094BBD96B7DC9CA4B28A','64567BC669AF5442A6FC5D99492232DE','69ADA3664A9CE044910E6605CEDC6B24','792F874F28D6BF4C804570DFC2671F4C','8B6B77B6B62D9242AF49AC16E4029976','C85BB40C92608C4D96520DECA87FE73F','CACBBF0A6D7EFE4695A3C49DF7C68E4E','DC37F5B1C9050C4EA874B1273A46B3A8','FC20C517E667EB46838AEBD1F224FC5C','FFCBA22C0724794B8B7D1493E0D93BC3','1E9E1D95C795BA4BBB4FE15E6D52FCCD','86752425A715B64CAAA29FAAEBECDA8A','62C6009CA158D449ABCDEB5ACB87B1E6','48947A3C2BDE3848B5C0DD50C3D00AE1','6974173C6C88C442817E7E21F8B20967','C26461D4A3B5B846B18ABAA0010C7B8E','EFFABA67BA7FCE41B3264E7799297B03','FAAD5A8AE4624C479739F69DD4A7D204','FBBF5EC84FB5C248AB01D3A419160F42','7C9BD1FCFB4B694D816AFE3BB30D0852','2484D4D35DE96C449F801D634882554D','6D9A84CDB26D2F43AA24256C125D9E13','95032E763A42F64AAF289508A8871533','E910A514B07C634DA0D6E439FB81353A','9E2028F4A8F1564CABE4A73D51634DA2','0DF9F4EE286C87468FBCA3A8767FDED4','215787EECFAB8D43BA98EA042EEE89D0','2762AE56FACF0342A6A1CF7CAF766D45','2A8B16021575D540BB75A4306210F1B2','2C8D7EC0470EBF4EBE90F6458660A9F9','2F2880E39859554FAB545171E0302D96','392607DEB5EF5B4CAFDD9AAA82306520','7A9FB39120899749AA392638FE0BDA79','7FDA0548F0D8324380C00E9E99BD926D','8609B506DC06E1488B8E76D584A8F1B8','AB264CA93097FC45A8B10F46DEBCF3D8','B48EB29D149D9444A7E8ED2E34B4DA17','BFFD09888355DA4E81DFB05A51271BDD','C0EA2C272E7F2245AEB1ED53AE7CCEAA','D22727F9BD537247BD1043970F316AC5','D784B71AF789A048A6D79261AA84E543','E137B592CE749A4D8599EDCBF5DD68A8','E66EE2E19E2B71448695FB58C55F482B','EAD29DA96CFB5F429CAE048AC645CF0E','00FE3502AF278F429971C83CD0D071E1','0E42A30E6D3D974EA62A2B0E502FBCB2','131CFEA4BB506C41ABEA9BFCDD302F8B','1CAB4B9F6916634C8B28030BB60D2C71','233EC96D91523D409811C929A7F0E136','2BA6641A0FBD1C42A1871986592E6F62','3142C0423AAFDA47B52A8EF2AC1D0B88','32EC1D8202A92C438F4BEAF104C49BD1','58FB2B7AE5BD0448833A465C3FF6E78D','5F1AD68CBF6EFD40B24A376705AB3364','76A4AC4F4FDD1648B8C1DC05700C4232','792302F3B6586C4DBBEB11BAB89868A4','7961C17630B0FE4C8D27C1E43D8B655C','8526977A0A51E54CB05BE08B237D7DF1','894BB44C3AED1246A047DC59A2C25488','8EC200287813284CA206DA302168F96C','922F13BD9EED5741B10D090A52FD67BF','A03FA618056B0149891AD6A732AA810F','A07830049C4E1049BCA603D9B3BD0C91','ACBA0A67E974BA4B8D9E7ECB3FB81BD5','AD98918AB774A64A9E8CB3B263268953','AF114C67BF4EB3439AC733A3AFD3E0A2','D5AB9E82265D1F4886F5787C10BA2DD4','D5FA9EE675C76F49879BAF0CDA42D56D','D5FECB77D19ADC44B66ED027D3B34373','DA33E00931B55E43B8FC874C5CE224C5','DABA859D6A6A4B46A1BCBAC45F65A72F','E035B05A3FB29E4391E92A924733B594','F0B8DFB06C1705418976D6BC44B12450','6A29DFFA92C3F749AEC19BC36EC838BB','F7D569BA44174E41BCB4F7D111E8F6B4','1DD419FF2112EE4C9780EF353DC3B712','518D79BFEE0CAB41AF26376208A3DE3A','8F07DA471E064D4C8B1056F56E3B4736','91D3E585D046F344A41DC9CA849BE215','D048B944754EBE428B13D69D21D236DC','F11974A68E72254183F889435B7072A6','FD48B844C7D15844A4C2B36FCB6EA533','F80F819DE8726444BFF963CCCA3BACDC','4B7955F8FCB7104B877608C0EB9244B1','5E26731F6B8F914EB04E8BB01BA775A3','9D97D54396681A48B689D232A853E8BB','F4DD8A520AD5A347994DBE91DCAC95CC','FD74A843589D554F8AEAE900EF494206','148CE6687BC2FF4DB708168381A34E95','0BBBBFA3A96D104C8D1E4030C4C36028','693E6F67FF3A4B4BBD9845ECCCA1617F','ACE812FD15F9FC4D848BA592314ADBA7','93DC26624EA17C499167DB5C91F47A9E','63F289010744BC4C87D6DCBA55AA1B13','23D93DF00A40214A8B76B8DCDDF7A561','FD94C02957D67C47B50ED5F39387B8F1','EC8A2AA4E8F20540B9A458A04C71F101','FBB8A778F2E9664BBA749AEFD586B937','2F2E1389945C59499C173EAA05A6216F');'''

        db.query(query) { rs ->
            while (rs.next()) {
                readBSON(ByteBuffer.wrap(rs.getBytes("Contents")))
            }
        }

        //        def result = db.query("SELECT * FROM Unit WHERE hex(ContainerID)='$CC_MODULE_ID';") { resultSet ->
        //            while (resultSet.next()) {
        //                def uuid = toUUID(resultSet.getBytes("UnitID"))
        //                def containmentName = resultSet.getString("ContainmentName")
        //                print "$uuid:$containmentName:"
        //                def blob = resultSet.getBytes("Contents")
        //                final ByteBuffer bbuf = ByteBuffer.wrap(blob)
        //                readBSON(bbuf)
        //            }
        //        }

    }
}