apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
def runtimeLibs = 'D:/Program Files/Mendix/7.11.0/runtime/bundles'
def version = '6.4.0'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.mendix.communitycommons.Main'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.owasp.antisamy', name: 'antisamy', version: '1.5.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.8'
    compileOnly fileTree(dir: "$runtimeLibs")
}

sourceSets {
    main {
	java {
	    srcDirs = ["src/CommunityCommons/javasource"]
	}
	resources {
	    srcDirs = ["src/CommunityCommons/resources"]
	}
    }
}

task copyToUserlib( type: Copy ) {
    into "$projectDir/src/CommunityCommons/userlib"
    from configurations.runtime
}

distributions {
    main {
	baseName = 'CommunityCommons'
	contents {
	    into('/') {
		from 'src/CommunityCommons'
		exclude('**/proxies/*')
	    }
	    into('/') {
		from 'package.xml'
	    }
	}
    }
}

distZip {
    archiveName "$baseName-$version" + ".mpk"
}

tasks.distZip.shouldRunAfter tasks.copyToUserlib

task fullDist {
    dependsOn 'clean', 'copyToUserlib', 'distZip'
}

clean {
    delete "$projectDir/src/CommunityCommons/userlib"
}

task list {
    doLast {
	File srcDir
	
	//org.gradle.api.file.FileCollection collection = files { srcDir.listFiles() }
	
	srcDir = file('src/CommunityCommons')
	println "Contents of $srcDir.name"
	def list = []
	srcDir.eachFileRecurse (groovy.io.FileType.FILES) { entry ->
	    list << file(java.nio.file.Paths.get('.').relativize(entry.absolutePath)) //FIXME
	}
	println list
    }
}