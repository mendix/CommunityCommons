buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.mongodb:bson:3.6.3"
    }
}

plugins {
    id "com.github.gmazzo.sqlite" version "0.2"
}

apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

import groovy.util.XmlParser
import groovy.xml.XmlUtil
import org.gradle.api.internal.file.copy.CopySpecInternal
import org.bson.BsonBinaryReader
import org.bson.BsonReader
import org.bson.Document
import org.bson.codecs.DecoderContext
import org.bson.codecs.DocumentCodec
import org.bson.BsonSerializationException
import java.nio.ByteBuffer
import java.nio.ByteOrder

project.ext {
    PACKAGEXML_TEMPLATE = '''<?xml version="1.0" encoding="utf-8" ?>
    <package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.mendix.com/package/1.0/">
        <modelerProject xmlns="http://www.mendix.com/modelerProject/1.0/">
            <module name="''' + "${project.name}" + '''" />
            <projectFile path="project.mpr" />
            <files/>
        </modelerProject>
    </package>'''

    CC_VERSION = '7.2.0'
    MXBUILD_VERSION = '7.1.0'
    CC_MODULE_ID = '5002A61056D0954A9EDEAECB3B953F23'
}

def runtimeLibs = "$buildDir/runtime/bundles"
def userLibDir = "$projectDir/src/CommunityCommons/userlib"

configurations {
    tar
}

repositories {
    mavenCentral()
    ivy {
	url 'https://cdn.mendix.com/'
	layout 'pattern', {
	    artifact '/[organisation]/[module]-[revision].[ext]'
	}
    }
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile fileTree(dir: "$runtimeLibs")
    compile group: 'org.owasp.antisamy', name: 'antisamy', version: '1.5.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.pdfbox', name: 'pdfbox-app', version: '2.0.8'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compileOnly fileTree(dir: "$runtimeLibs")

    tar "runtime:mxbuild:${project.MXBUILD_VERSION}@tar.gz"
}

sourceSets {
    main {
        java {
            srcDirs = ["src/CommunityCommons/javasource"]
        }
        resources {
            srcDirs = ["src/CommunityCommons/resources"]
        }
    }
    test {
        java {
            srcDirs = ["src/CommunityCommons/test"]
        }
    }
}

task copyToUserlib( type: Copy ) {
    into userLibDir
    from configurations.runtime
    eachFile { fileCopyDetails ->
        def requiredLibFlag = new File( destinationDir, "${fileCopyDetails.name}.${project.name}.RequiredLib")
        requiredLibFlag.write ''
    }
}

task untarMxbuild( type: Copy ) {
    //TODO: don't re-download if bundles directory exists
    configurations.tar.findAll{it.name.endsWith('tar.gz')}.each {
        from tarTree(resources.gzip(it))
        into buildDir
        include('**/runtime/bundles/*')
        includeEmptyDirs = false
    }
}

distributions {
    main {
        baseName = 'CommunityCommons'
        contents {
            into('/') {
                from 'src/CommunityCommons'
                exclude('**/proxies/*')
                exclude('**/system/*')
            }
            into('/') {
                from 'package.xml'
            }
        }
    }
}

distZip {
    archiveName "$baseName-${project.CC_VERSION}" + ".mpk"
}


task fullDist {
    dependsOn 'clean', 'copyToUserlib', 'untarMxbuild', 'packageXML', 'distZip'
}

clean {
    delete "$projectDir/src/CommunityCommons/userlib"
    delete "$projectDir/package.xml"
}

task packageXML {
    ext.interpolateFileElementXML = { resource ->
        return "<file path=\"${resource}\" />"
    }

    ext.buildRelativePath = { fileEntry, directory ->
        return (fileEntry.absolutePath - directory.absolutePath).replace("/", "\\").substring(1)
    }

    ext.getResources = {
        def list = []
        def userLibDirectory = file(userLibDir)

        def distributionCopySpec = distributions.main.contents.buildRootResolver().allSource

        distributionCopySpec.each { f ->
            list << interpolateFileElementXML(
                buildRelativePath(f, file("$projectDir/src/CommunityCommons"))
            )
        }

        return list
    }

    doLast {
        def packageXMLResources = getResources()
        def packageXML = new XmlParser().parseText(project.PACKAGEXML_TEMPLATE)

        packageXMLResources.each { resource ->
            def resourceXML = new XmlParser().parseText(resource)
            packageXML.modelerProject.files[0].append(resourceXML)
        }

        String out = XmlUtil.serialize( packageXML )
        new File("$projectDir/package.xml").write(out)
    }

    tasks.distZip.shouldRunAfter tasks.packageXML
    tasks.untarMxbuild.shouldRunAfter tasks.copyToUserlib
    tasks.packageXML.shouldRunAfter tasks.untarMxbuild
}

task readProjectMpr {
    // https://gist.github.com/RealNitro/746c07a50b1ae897fe44
    ext.readBSON = { buffer ->
        while (true) {
            BsonReader reader = new BsonBinaryReader (buffer)
            DecoderContext decoderContext = DecoderContext.builder().build()
            DocumentCodec codec = new DocumentCodec()
            try {
                Document document = codec.decode(reader, decoderContext)
                println document.getString('Name')
            } catch (BsonSerializationException e) {
                break;
            }
        }
    }

    ext.queryUnitIDs = { db, containerID, units ->
        db.eachRow("SELECT hex(UnitID) FROM Unit WHERE hex(ContainerID)=:cid;", cid: containerID) { row ->
            //            print "Inside closure "
            def unitID = row.getString(1)
            //            println unitID
            queryUnitIDs(db, unitID, units)
            units << unitID
        }
        return units
    }

    def mprFile = file("$projectDir/src/CommunityCommons/CommunityCommons.mpr")
    //outputs.file file("project.mpr")
    doLast {
        def db = openSQLiteDatabase(mprFile)
        def unitIDs = queryUnitIDs(db, CC_MODULE_ID, [])

        def commaSeparatedIDs = "${unitIDs.collect{"\'$it\'"}.join(',')}"
        def query = '''SELECT * FROM Unit WHERE hex(UnitID) in (''' + commaSeparatedIDs + ''');'''

        db.eachRow(query) { rs ->
            while (rs.next()) {
                readBSON(ByteBuffer.wrap(rs.getBytes("Contents")))
            }
        }

        //        def result = db.query("SELECT * FROM Unit WHERE hex(ContainerID)='$CC_MODULE_ID';") { resultSet ->
        //            while (resultSet.next()) {
        //                def uuid = toUUID(resultSet.getBytes("UnitID"))
        //                def containmentName = resultSet.getString("ContainmentName")
        //                print "$uuid:$containmentName:"
        //                def blob = resultSet.getBytes("Contents")
        //                final ByteBuffer bbuf = ByteBuffer.wrap(blob)
        //                readBSON(bbuf)
        //            }
        //        }

    }
}