apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

import groovy.util.XmlParser

//def runtimeLibs = 'D:/Program Files/Mendix/7.11.0/runtime/bundles'
def runtimeLibs = '/home/reinout/Mendix/mxbuild-7.11.0/runtime/bundles'
def userLibDir = "$projectDir/src/CommunityCommons/userlib"
def version = '6.4.0'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.mendix.communitycommons.Main'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.owasp.antisamy', name: 'antisamy', version: '1.5.3'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.8'
    compileOnly fileTree(dir: "$runtimeLibs")
}

sourceSets {
    main {
	java {
	    srcDirs = ["src/CommunityCommons/javasource"]
	}
	resources {
	    srcDirs = ["src/CommunityCommons/resources"]
	}
    }
}

task copyToUserlib( type: Copy ) {
    into userLibDir
    from configurations.runtime
}

distributions {
    main {
	baseName = 'CommunityCommons'
	contents {
	    into('/') {
		from 'src/CommunityCommons'
		exclude('**/proxies/*')
	    }
	    into('/') {
		from 'package.xml'
	    }
	}
    }
}

distZip {
    archiveName "$baseName-$version" + ".mpk"
}


task fullDist {
    dependsOn 'clean', 'copyToUserlib', 'packageXML', 'distZip'
}

clean {
    delete "$projectDir/src/CommunityCommons/userlib"
    delete "$projectDir/package.xml"
}

task packageXML {
    ext.interpolateFileElementXML = { resource ->
        return "<file path=\"${resource}\" />"
    }
    
    ext.buildRelativePath = { prefix, fileEntry, directory ->
        return prefix + (fileEntry.absolutePath - directory.absolutePath).replace("/", "\\")
    }
    
    ext.addFileElementToList = { sourceDir, String targetDir, entry, list ->
        def resource = buildRelativePath(targetDir, entry, sourceDir)
        list << interpolateFileElementXML(resource)
    }
    
    ext.getResources = {
        def list = []
        def userLibDirectory = file(userLibDir)        
        
        sourceSets.main.java.srcDirs.each { dir ->
            dir.eachFileRecurse (groovy.io.FileType.FILES) { entry ->
                if (entry.toString().contains("proxies")) { return }
                addFileElementToList(dir, "javasource", entry, list)
            }
        }
        sourceSets.main.resources.srcDirs.each { dir ->
            dir.eachFileRecurse (groovy.io.FileType.FILES) { entry ->
                addFileElementToList(dir, "resources", entry, list)
            }
        }        
        userLibDirectory.eachFileRecurse (groovy.io.FileType.FILES) { entry ->
            addFileElementToList(userLibDirectory, "userlib", entry, list)
        }
        
        return list
    }
    
    doLast {
        def packageXMLResources = getResources()
        def packageXMLTemplate = "$projectDir/package.xml.in"
        def packageXML = new XmlParser().parse(packageXMLTemplate)
                
        packageXMLResources.each { resource -> 
            def resourceXML = new XmlParser().parseText(resource)
            packageXML.modelerProject.files[0].append(resourceXML)
        }
        
        String out = groovy.xml.XmlUtil.serialize( packageXML )
        new File("$projectDir/package.xml").write(out)
    }

    tasks.distZip.shouldRunAfter tasks.packageXML
    tasks.packageXML.shouldRunAfter tasks.copyToUserlib
}