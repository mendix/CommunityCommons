// This gradle build depends on Mendix internal resources, the lastest commit
// which did not is 6e1527a5e31347c6914bc34deab31ef4ab46953b. You may restore
// the gradle scripts to that commit if you which to use them at your own risk.
// We don't guarantee that those will keep working in the future.

plugins {
    id 'java'
    id 'com.mendix.gradle.publish-module-plugin' version '1.21'
    id 'net.researchgate.release' version '2.8.1'
}

sourceCompatibility = '21'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

project.ext {
    mendixPublicApiVersion = '10.21.0'
}

def mprDir = "$projectDir/src/CommunityCommons"

mxMarketplace {
    appNumber = 170
    appName = 'Community Commons'
    moduleName = 'CommunityCommons'
    moduleLicense = 'Apache V2'
    appDirectory = "src/CommunityCommons"
    versionPathPrefix = "_Version " // the path prefix within the module to the version folder
    includeFiles = ["$mprDir/License.txt", "$mprDir/SiemensMendixCommunityCommons__11.0.0__READMEOSS.html"]
    syncJavaDependenciesBeforeBuild = true
}

def userLibDir = "$mprDir/userlib"
def vendorLibDir = "$mprDir/vendorlib"

repositories {
    maven {
        url 'https://nexus.rnd.mendix.com/repository/repo1-proxy/'
    }
    maven {
        url 'https://nexus.rnd.mendix.com/repository/maven-hosted/'
    }
}

configurations {
    implementation {
        canBeResolved = true
    }
}

dependencies {
    testImplementation(
            [group: 'com.mendix', name: 'public-api', version: "$mendixPublicApiVersion"],
            [group: 'junit', name: 'junit', version: '4.13.1'],
            [group: 'org.apache.httpcomponents.core5', name: 'httpcore5', version: '5.0.3'],
            [group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.0.3'],
            [group: 'org.hamcrest', name: 'hamcrest', version: '2.2']
    )

    testImplementation fileTree(vendorLibDir) { include '*.jar' }

    compileOnly([group: 'com.mendix', name: 'public-api', version: "$mendixPublicApiVersion"])
}

tasks.withType(JavaCompile) {
    options.deprecation = true
}

sourceSets {
    main {
        java {
            srcDir '$mprDir/javasource'
            exclude 'unittesting/**'
            exclude 'system/UserActionsRegistrar.java'
        }
    }
    test {
        java {
            srcDirs = ["src/test", "$mprDir/javasource"]
        }
    }
}

test {
    exclude 'unittesting/*'
}

task copyAllToUserlib(type: Copy) {
    from configurations.testCompileClasspath
    into userLibDir
    eachFile { fileCopyDetails -> new File(destinationDir, "${fileCopyDetails.name}.${project.name}.RequiredLib").write '' }
}

tasks.named('mxBuild') {
    dependsOn copyAllToUserlib
}

tasks.named('compileJava') {
    dependsOn mxBuild
}

clean {
    delete "$userLibDir"
    delete "$vendorLibDir"
}

release {
    tagTemplate = '$name-$version'
}

task afterReleaseBuildTask {
    dependsOn 'clean'
    dependsOn 'publishModuleToMarketplace'

    tasks.findByName('publishModuleToMarketplace').mustRunAfter 'clean'
}

afterReleaseBuild.dependsOn afterReleaseBuildTask
